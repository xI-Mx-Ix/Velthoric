plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
    id "com.hypherionmc.modutils.modpublisher" version "2.1.8" apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        if (project.name == 'vx-native') {
            archivesName = project.name
        } else {
            archivesName = "$rootProject.archives_name-$project.name"
        }
    }

    repositories {
        mavenCentral()
        maven { url = 'https://cursemaven.com'}
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots'}

        flatDir {
            dirs rootProject.file('libraries')
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        mappings loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.20.2:2023.10.08@zip")
        }

        implementation 'com.github.luben:zstd-jni:1.5.7-6'
        minecraftRuntimeLibraries 'com.github.luben:zstd-jni:1.5.7-6'

        // Java-only Jolt library
        implementation "com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}"
        minecraftRuntimeLibraries "com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}"

        // Native libraries classifier variable
        def nativeClassifier = "ReleaseSp" // classifier used for all native platforms

        // List of native platforms
        def nativePlatforms = [
                'Windows64',
                'Linux64',
                'Linux_ARM64',
                'MacOSX64',
                'MacOSX_ARM64'
        ]

        // Loop through each platform and add the native library
        nativePlatforms.each { os ->
            implementation "com.github.stephengold:jolt-jni-${os}:${jolt_jni_version}:${nativeClassifier}"
            minecraftRuntimeLibraries "com.github.stephengold:jolt-jni-${os}:${jolt_jni_version}:${nativeClassifier}"
        }
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {
        }
    }
}

def credentialsFile = file('credentials.properties')
if (credentialsFile.exists()) {
    def properties = new Properties()
    credentialsFile.withInputStream { properties.load(it) }
    ext.modrinth_token = properties.getProperty('modrinth_token')
    ext.curseforge_token = properties.getProperty('curseforge_token')
} else {
    ext.modrinth_token = null
    ext.curseforge_token = null
}

def resolveChangelog() {
    // 1. Try to find the changelog for the exact current version
    def currentVersionFile = rootProject.file("changelog/${rootProject.mod_version}.md")
    if (currentVersionFile.exists()) {
        return currentVersionFile.text
    }

    // 2. If it's a snapshot, try to find the changelog for the corresponding release version
    if (rootProject.mod_version.endsWith("-SNAPSHOT")) {
        def releaseVersion = rootProject.mod_version.replace("-SNAPSHOT", "")
        def releaseVersionFile = rootProject.file("changelog/${releaseVersion}.md")
        if (releaseVersionFile.exists()) {
            return releaseVersionFile.text
        }
    }

    // 3. If no file is found, provide a default message
    return "No changelog provided for this version."
}

task generateJoltDoc {

    def joltModule = configurations.detachedConfiguration(
            dependencies.create("com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}")
    ).singleFile

    def outputFile = file("$buildDir/docs/jolt.txt")

    inputs.file(joltModule)
    outputs.file(outputFile)

    doLast {
        println "=== JoltDoc Generation Started ==="

        if (!joltModule.exists()) {
            throw new FileNotFoundException("Input JAR not found: ${joltModule.absolutePath}")
        }

        println "Analyzing JAR: ${joltModule.name}"
        println "Writing output to: ${outputFile.absolutePath}"

        outputFile.parentFile.mkdirs()
        outputFile.text = ''

        def zipFile = new java.util.zip.ZipFile(joltModule)
        def classEntries = zipFile.entries().findAll { entry ->
            !entry.isDirectory() && entry.name.endsWith('.class')
        }

        println "Found ${classEntries.size()} class files."

        classEntries.eachWithIndex { entry, idx ->
            def className = entry.name.replace('/', '.').replaceAll('\\.class$', '')
            println "[${idx + 1}/${classEntries.size()}] Processing class: ${className}"

            def commandOutput = new ByteArrayOutputStream()

            project.exec {
                executable = 'javap'
                args '-p', '-classpath', joltModule.absolutePath, className
                standardOutput = commandOutput
                ignoreExitValue = true
            }

            outputFile.append("${className.substring(className.lastIndexOf('.') + 1)}.class:\n")

            def javapResult = commandOutput.toString()
            def methodLines = javapResult.lines()
                    .findAll { it.contains('(') && it.contains(')') && !it.contains('{') && !it.contains('Compiled from') }
                    .findAll { it.trim().startsWith('public') || it.trim().startsWith('protected') }

            println "  Found ${methodLines.size()} methods in ${className}."

            methodLines.each { line ->
                String cleanedLine = line.trim()
                        .replaceAll('public |protected |static |final |synchronized |native ', '')

                if (line.trim().startsWith('protected')) {
                    cleanedLine = "protected ${cleanedLine}"
                }

                outputFile.append("  ${cleanedLine}\n")
                println "    Logged method: ${cleanedLine}"
            }

            outputFile.append("\n")
        }

        zipFile.close()
        println "=== JoltDoc Generation Finished ==="
    }
}