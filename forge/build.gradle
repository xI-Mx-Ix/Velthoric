plugins {
    id 'com.gradleup.shadow'
    id "com.hypherionmc.modutils.modpublisher"
}

loom {
    forge {
        mixinConfig "velthoric.mixins.json"
    }

    runs {
        server {
            runDir "run-server"
        }
        client {
            runDir "run-client"
            programArgs '--username', 'dev'
        }
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    implementation project(path: ":vx-native", configuration: "namedElements")
    minecraftRuntimeLibraries project(path: ":vx-native", configuration: "namedElements")
    shadowBundle project(path: ":vx-native", configuration: "namedElements")

    implementation 'com.github.luben:zstd-jni:1.5.7-6'
    minecraftRuntimeLibraries 'com.github.luben:zstd-jni:1.5.7-6'
    shadowBundle 'com.github.luben:zstd-jni:1.5.7-6'

    shadowBundle("com.github.stephengold:jolt-jni-Linux64:${jolt_jni_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    var replaceProperties = [
            minecraft_version: rootProject.minecraft_version,
            minecraft_version_range: rootProject.minecraft_version_range,
            forge_version: rootProject.forge_version,
            forge_version_range: rootProject.forge_version_range,
            loader_version_range: rootProject.loader_version_range,
            mod_id: rootProject.mod_id,
            mod_name: rootProject.mod_name,
            mod_license: rootProject.mod_license,
            mod_version: rootProject.mod_version,
            mod_authors: rootProject.mod_authors,
            mod_description: rootProject.mod_description
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'

    // Natives are bundled in vx-native, no need to include them here
    exclude 'aix/**'
    exclude 'darwin/**'
    exclude 'freebsd/**'
    exclude 'linux/**'
    exclude 'win/**'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

publisher {
    apiKeys {
        modrinth rootProject.modrinth_token
        curseforge rootProject.curseforge_token
    }
    setDebug(false)
    setCurseID("1367260")
    setModrinthID("velthoric")
    setVersionType("beta")
    setChangelog(rootProject.resolveChangelog())
    setProjectVersion(rootProject.mod_version)
    setDisplayName("Velthoric ${rootProject.mod_version}")
    setGameVersions(rootProject.minecraft_version)
    setLoaders("forge", "neoforge")
    setArtifact(remapJar)

    modrinthDepends {
        required "architectury-api"
    }

    curseDepends {
        required "architectury-api"
    }
}